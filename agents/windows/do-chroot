#!/bin/bash
set -x
# $1: cmd(s) to be executed within chroot jail
# if non-existent, enter chroot jail with 'bash -l'

CMD="$1"
export HOSTNAME=cmk-windows-agent-chroot
unset LANG
export TERM=linux

SCRIPT_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
BASE="$(realpath $SCRIPT_DIR/../..)"

if [ -z $CHROOT_PATH ]; then
    echo "ERROR: CHROOT_PATH not set"
    exit 1
fi

if [ -z $CHROOT_BUILD_DIR ]; then
    echo "ERROR: CHROOT_BUILD_DIR not set"
    exit 1
fi

if [ ! -e $CHROOT_PATH/proc/self ] ; then
    mount -t proc proc $CHROOT_PATH/proc
fi

if [ ! -e $CHROOT_PATH/dev/sda ] ; then
    mount -o bind /dev $CHROOT_PATH/dev
fi

if [ ! -e $CHROOT_PATH/dev/pts/ptmx ] ; then
    mount -t devpts devpts $CHROOT_PATH/dev/pts 2>/dev/null || true
fi

if [ ! -e $CHROOT_PATH/$CHROOT_BUILD_DIR ]; then
    mkdir $CHROOT_PATH/$CHROOT_BUILD_DIR
fi

if [ ! -e $CHROOT_PATH/$CHROOT_BUILD_DIR/Makefile ] ; then
    mount -o bind $BASE $CHROOT_PATH/$CHROOT_BUILD_DIR
fi

if [ -n "$CMD" ] ; then
    chroot $CHROOT_PATH /usr/bin/env \
           NEW_VERSION=$NEW_VERSION bash -c "$CMD"
    EXIT_CODE=$?
else
    chroot $CHROOT_PATH /usr/bin/env CHROOTNAME=$CHROOTNAME bash -l
    EXIT_CODE=$?
fi

function unmount()
{
    target=$1
    umount $target
    if [ $? != 0 ] ; then
        echo "retrying after 5 seconds..."
        sleep 5
        umount $target && echo "successful"
    fi
}

unmount $CHROOT_PATH/dev/pts
unmount $CHROOT_PATH/dev
unmount $CHROOT_PATH/proc
unmount $CHROOT_PATH/$CHROOT_BUILD_DIR

exit $EXIT_CODE
