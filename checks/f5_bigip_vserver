#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Current server status
# vserver["status"]
# 0 - NONE:   disabled
# 1 - GREEN:  available in some capacity
# 2 - YELLOW: not currently available
# 3 - RED:    not available
# 4 - BLUE:   availability is unknown
# 5 - GREY:   unlicensed
MAP_SERVER_STATUS = {
    0: (1, "is disabled"),
    1: (0, "is up and available"),
    2: (2, "is currently not available"),
    3: (2, "is not available"),
    4: (1, "availability is unknown"),
    5: (3, "is unlicensed")
}

# vserver["enabled"]
# 0 - none
# 1 - enabled
# 2 - disabled
# 3 - disabledbyparent
MAP_ENABLED = ("NONE", "enabled", "disabled", "disabled by parent")

# Check configured limits
MAP_PARAM_TO_TEXT = {
    "if_in_octets": "Incoming Bytes",
    "if_out_octets": "Outgoing Bytes",
    "if_total_octets": "Total Bytes",
    "if_in_pkts": "Incoming Packets",
    "if_out_pkts": "Outgoing Packets",
    "if_total_pkts": "Total Packets",
}


def get_ip_address_human_readable(ip_addr):
    """
    u'\xc2;xJ'  ->  '194.59.120.74'
    """
    ip_addr = "".join(chr(ord(x)) for x in ip_addr)
    if len(ip_addr) == 4:
        return socket.inet_ntop(socket.AF_INET, ip_addr)
    if len(ip_addr) == 16:
        return socket.inet_ntop(socket.AF_INET6, ip_addr)
    return "-"


def parse_f5_bigip_vserver(info):
    vservers = {}
    for line in info:
        instance = vservers.setdefault(line[0], {
            "ip": get_ip_address_human_readable(line[4]),
            "detail": line[3],
        })
        for key, index in [
            ("status", 1),
            ("enabled", 2),
            ("connections_duration_min", 5),
            ("connections_duration_max", 6),
            ("connections_duration_mean", 7),
            ("if_in_pkts", 8),
            ("if_out_pkts", 9),
            ("if_in_octets", 10),
            ("if_out_octets", 11),
            ("connections_rate", 12),
            ("connections", 13),
            ("packet_velocity_asic", 14),
        ]:
            try:
                value = int(line[index])
            except (IndexError, ValueError):
                continue
            instance.setdefault(key, []).append(value)
    return vservers


def inventory_f5_bigip_vserver(parsed):
    for name, vserver in parsed.items():
        if vserver["status"][0] in [1, 4]:  # Green and Blue
            yield name, {}


def get_aggregated_values(vserver):
    aggregation = collections.Counter()
    now = time.time()

    counter_keys = {
        "if_in_pkts", "if_out_pkts", "if_in_octets", "if_out_octets", "connections_rate",
        "packet_velocity_asic"
    }
    # Calculate counters
    for what in counter_keys & set(vserver.keys()):
        for idx, entry in enumerate(vserver[what]):
            rate = get_rate("%s.%s" % (what, idx), now, entry)
            aggregation[what] += rate

    # Calucate min/max/sum/mean values
    for what, function in [
        ("connections_duration_min", min),
        ("connections_duration_max", max),
        ("connections", sum),
        ("connections_duration_mean", lambda x: float(sum(x) / len(x))),
    ]:
        value_list = vserver.get(what)
        if value_list:
            aggregation[what] = function(value_list)

    return aggregation


@get_parsed_item_data
def check_f5_bigip_vserver(_item, params, data):
    # Need compatibility to version with _no_params
    if params is None:
        params = {}

    aggregation = get_aggregated_values(data)

    # Current number of connections
    yield 0, "Client connections: %d" % aggregation["connections"], aggregation.items()

    # New connections per time
    yield 0, "Rate: %.2f/sec" % aggregation["connections_rate"]

    state, state_readable = MAP_SERVER_STATUS.get(data["status"][0],
                                                  (3, "Unhandled status (%d)" % data["status"][0]))
    state = params.get('state', {}).get(state_readable.replace(' ', '_'), state)

    # vserver["enabled"]
    # 0 - none
    # 1 - enabled
    # 2 - disabled
    # 3 - disabledbyparent
    enabled = MAP_ENABLED[data["enabled"][0]]

    output = "Virtual Server with IP %s is %s, State %s, Detail: %s" % (data["ip"][0],\
             enabled, state_readable, data["detail"][0])

    # Special handling
    if data["status"][0] == 3:  # not available
        # Statement from the network team, it's uncritical when the childrens are down
        if data["detail"][0].lower() == "The children pool member(s) are down".lower():
            state = params.get('state', {}).get("children_pool_members_down_if_not_available", 0)

    yield state, output

    aggregation["if_total_octets"] = aggregation["if_in_octets"] + aggregation["if_out_octets"]
    aggregation["if_total_pkts"] = aggregation["if_in_pkts"] + aggregation["if_out_pkts"]
    for param_var, levels in params.items():
        if param_var == "state":
            continue
        if param_var.endswith("_lower") and isinstance(levels, tuple):
            levels = (None, None) + levels
        value = aggregation[param_var.rstrip("_lower")]
        state, infotext, _extra_perfdata = check_levels(
            value,
            param_var,
            levels,
            human_readable_func=lambda x, p=param_var: get_bytes_human_readable(x, base=1000.0)
            if "octets" in p else str(x),
            infoname=MAP_PARAM_TO_TEXT[param_var.rstrip("_lower")])
        if state:
            yield state, infotext


check_info["f5_bigip_vserver"] = {
    "parse_function"          : parse_f5_bigip_vserver,
    "check_function"          : check_f5_bigip_vserver,
    "inventory_function"      : inventory_f5_bigip_vserver,
    "group"                   : "f5_bigip_vserver",
    "service_description"     : "Virtual Server %s",
    "has_perfdata"            : True,
    "snmp_info"               : (".1.3.6.1.4.1.3375.2.2.10", [
                                    "13.2.1.1", # ltmVsStatusName
                                    "13.2.1.2", # ltmVsStatusAvailState
                                    "13.2.1.3", # ltmVsStatusEnabledState
                                    "13.2.1.5", # ltmVsStatusDetailReason
                                    "1.2.1.3",  # IP Address
                                    "2.3.1.2",  # min conn duration
                                    "2.3.1.3",  # max conn duration
                                    "2.3.1.4",  # mean connection duration
                                    "2.3.1.6",  # Client Packets In
                                    "2.3.1.8",  # Client Packets Out
                                    "2.3.1.7",  # Client Bytes In
                                    "2.3.1.9",  # Client Bytes Out
                                    "2.3.1.11", # Client Total Connections
                                    "2.3.1.12", # Client Current Connections
                                    "2.3.1.25", # packet_velocity_asic Total Connections
                               ]),
    "snmp_scan_function"      : lambda oid: ".1.3.6.1.4.1.3375.2" in oid(".1.3.6.1.2.1.1.2.0") \
                                      and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower(),
}
