#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
import json
import re


def _docker_get_bytes(string):
    '''get number of bytes from string

    e.g.
    "123GB (42%)" -> 123000000000
    "0 B"         -> 0
    "2B"          -> 2
    "23 kB"       -> 23000
    '''
    # remove percent
    string = string.split('(')[0].strip()
    tmp = re.split('([a-zA-Z]+)', string)
    value_string = tmp[0].strip()
    unit_string = tmp[1].strip() if len(tmp) > 1 else 'B'
    try:
        factor = {
            'TB': 10**12,
            'GB': 10**9,
            'MB': 10**6,
            'KB': 10**3,
            'kB': 10**3,
            'B': 1,
            '': 1,
        }[unit_string]
        return int(float(value_string) * factor)
    except (ValueError, TypeError):
        return None


def _docker_trunc_id(hash_string):
    '''normalize to short ID

    Some docker commands use shortened, some long IDs:
    Convert long ones to short ones, e.g.
    "sha256:8b15606a9e3e430cb7ba739fde2fbb3734a19f8a59a825ffa877f9be49059817"
    to
    "8b15606a9e3e"
    '''
    long_id = hash_string.split(':', 1)[-1]
    return long_id[:12]


def _get_repo_tag(string):
    if ":" in string:
        return tuple(string.rsplit(":", 1))
    return string, "latest"


def _fix_keys(dictionary, map_keys):
    for old, new in map_keys:
        if old in dictionary:
            dictionary[new] = dictionary.pop(old)


def parse_docker_node_info(info):
    '''parse output of "docker info"'''
    if not info:
        return {}

    # parse legacy json output (verisons 1.5.0 - 1.5.0p6)
    joined = " ".join(info[0])
    if joined.endswith("permission denied"):
        return {}
    try:
        # this may contain a certificate containing newlines.
        return json.loads(joined.replace("\n", "\\n"))
    except ValueError:
        pass

    # changes in 19.03.01
    start_index = 0
    if info[0][0] == "|Client":
        try:
            start_index = info.index(["|Server", ""]) + 1
        except ValueError:
            pass

    parsed = {}
    prefix = ""
    for row in info[start_index:]:
        if not row:
            continue
        # remove '|', it was protecting leading whitespace
        row0 = row[0][1:]
        if not row0:
            continue
        # ignore misssing keys / pad lines that are not of "key: value" type
        if len(row) == 1:
            row.append('')
        key = row0.strip()
        value = ':'.join(row[1:]).strip()
        # indented keys are prefixed by the last not indented key
        if len(row0) - len(key) == 0:
            parsed[key] = value
            prefix = key
        else:
            parsed[prefix + key] = value

    # changes in 19.03.01
    _fix_keys(parsed, (("Running", "ContainersRunning"), ("Stopped", "ContainersStopped"),
                       ("Paused", "ContainersPaused"), ("Managers", "SwarmManagers"),
                       ("NodeID", "SwarmNodeID")))

    ## some modifications to match json output:
    for key in ("Images", "Containers", "ContainersRunning", "ContainersStopped",
                "ContainersPaused"):
        try:
            parsed[key] = int(parsed[key])
        except (KeyError, ValueError):
            pass
    # reconstruct labels (they where not in "k: v" format)
    parsed["Labels"] = []
    for k in parsed.keys():  # pylint: disable=consider-iterating-dictionary
        if k.startswith("Labels") and k != "Labels":
            parsed["Labels"].append(k[6:] + parsed.pop(k))
    # reconstruct swarm info:
    if "Swarm" in parsed:
        swarm = {"LocalNodeState": parsed["Swarm"]}
        if "SwarmNodeID" in parsed:
            swarm["NodeID"] = parsed.pop("SwarmNodeID")
        if "SwarmManagers" in parsed:
            swarm["RemoteManagers"] = parsed.pop("SwarmManagers")
        parsed["Swarm"] = swarm

    if "Server Version" in parsed:
        parsed["ServerVersion"] = parsed.pop("Server Version")
    if "Registry" in parsed:
        parsed["IndexServerAddress"] = parsed.pop("Registry")

    return parsed


def _docker_parse_table(rows, fields, keys):
    '''docker provides us with space separated tables with field containing spaces

    e.g.:

    TYPE           TOTAL  ACTIVE   SIZE       RECLAIMABLE
    Images         7      6        2.076 GB   936.9 MB (45%)
    Containers     22     0        2.298 GB   2.298 GB (100%)
    Local Volumes  5      5        304 B      0 B (0%)
    '''
    if not rows or not rows[0]:
        return []

    indices = []
    for field in fields:
        rex = regex(field + r'\ *')
        m = rex.search(rows[0][0])
        if m is not None:
            start, end = m.start(), m.end()
            if end - start == len(field):
                end = None
            indices.append((start, end))
        else:
            indices.append((0, 0))

    table = []
    for row in rows[1:]:
        if not row:
            continue
        try:
            line = {k: row[0][i:j].strip() for k, (i, j) in zip(keys, indices)}
        except IndexError:
            continue
        table.append(line)

    return table


def parse_docker_system_df(info):
    def int_or_zero(s):
        return int(s.strip() or 0)

    field_map = (
        ('TYPE', 'TOTAL', 'ACTIVE', 'SIZE', 'RECLAIMABLE'),
        ('Type', 'TotalCount', 'Active', 'Size', 'Reclaimable'),
        (str, int_or_zero, int_or_zero, _docker_get_bytes, _docker_get_bytes),
    )

    try:  # parse legacy json output: from 1.5.0 - 1.5.0p6
        table = [json.loads(",".join(row)) for row in info if row]
    except ValueError:
        table = _docker_parse_table(info, field_map[0], field_map[1])

    parsed = {}
    for line in table:
        for key, type_ in zip(field_map[1], field_map[2]):
            v = line.get(key)
            if v is not None:
                line[key] = type_(v)
        parsed[line.get("Type").lower()] = line

    return parsed


def _get_json_list(info):
    json_list = []
    for row in info:
        if not row:
            continue
        try:
            json_list.append(json.loads(' '.join(row)))
        except ValueError:
            pass
    # some buggy docker commands produce empty output
    return [element for element in json_list if element]


def parse_docker_subsection_images(info):

    table = _get_json_list(info)

    parsed = {}
    for item in table:
        v = item.get("VirtualSize")
        if v is not None:
            item["VirtualSize"] = _docker_get_bytes(v)
        parsed[item.get("ID")] = item

    return parsed


def parse_docker_subsection_image_labels(info):

    table = _get_json_list(info)

    return {_docker_trunc_id(long_id): data for long_id, data in table if data is not None}


def parse_docker_subsection_image_inspect(info):
    try:
        table = json.loads(' '.join(' '.join(row) for row in info if row))
    except ValueError:
        return {}
    return {_docker_trunc_id(image["Id"]): image for image in table}


def parse_docker_subsection_containers(info):

    table = _get_json_list(info)

    parsed = {}
    for item in table:
        image_name = item.get("Image", "")
        item["Repository"], item["Tag"] = _get_repo_tag(image_name)
        parsed[item.get("ID")] = item

    return parsed


def _split_subsections(info):
    subname = ''
    subsections = {}
    for row in info:
        if not row:
            continue
        if row[0].startswith('[[[') and row[0].endswith(']]]'):
            subname = row[0].strip('[]')
            continue
        subsections.setdefault(subname, []).append(row)
    return subsections


def parse_docker_messed_up_labels(string):
    '''yield key value pairs

    'string' is in the format "key1=value1,key2=value2,...", but there
    may be unescaped commas in the values.
    '''
    def toggle_key_value():
        for chunk in string.split('='):
            for item in chunk.rsplit(',', 1):
                yield item

    toggler = toggle_key_value()
    return dict(zip(toggler, toggler))


def parse_docker_node_images(info):
    subsections = _split_subsections(info)
    images = parse_docker_subsection_images(subsections.get("images", []))
    image_labels = parse_docker_subsection_image_labels(subsections.get("image_labels", []))
    image_inspect = parse_docker_subsection_image_inspect(subsections.get("image_inspect", []))
    containers = parse_docker_subsection_containers(subsections.get("containers", []))

    for image_id, pref_info in image_inspect.iteritems():
        image = images.setdefault(image_id, {})
        image["ID"] = image_id
        labels = pref_info.get("Config", {}).get("Labels")
        if labels is not None:
            image.setdefault("__labels__", {}).update(labels)
        image["CreatedAt"] = pref_info["Created"]
        image["VirtualSize"] = pref_info["VirtualSize"]
        repotags = pref_info.get("RepoTags")
        if repotags:
            image["Repository"], image["Tag"] = _get_repo_tag(repotags[-1])
        else:
            repo = pref_info.get("RepoDigest", "").split('@', 1)[0]
            image["Repository"], image["Tag"] = _get_repo_tag(repo)

    for image in images.itervalues():
        image["amount_containers"] = 0
        image.setdefault("__labels__", {})

    for image_id, labels in image_labels.iteritems():
        image = images.get(_docker_trunc_id(image_id))
        if image is not None and labels is not None:
            image["__labels__"].update(labels)

    mapping = {(i['Repository'], i['Tag']): i['ID'] for i in images.itervalues()}

    for cont in containers.itervalues():
        image_id = mapping.get((cont["Repository"], cont["Tag"]))
        image = images.get(image_id)
        if image is not None:
            image["amount_containers"] += 1

        labels = cont.get("Labels")
        if isinstance(labels, (str, unicode)):
            cont["Labels"] = parse_docker_messed_up_labels(labels)

    return {"images": images, "containers": containers}


def parse_docker_network_inspect(info):
    try:
        return json.loads(''.join(row[0] for row in info if row))
    except ValueError:
        return []
