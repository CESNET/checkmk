#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#   .--kernel--Counters----------------------------------------------------.
#   |                ____                  _                               |
#   |               / ___|___  _   _ _ __ | |_ ___ _ __ ___                |
#   |              | |   / _ \| | | | '_ \| __/ _ \ '__/ __|               |
#   |              | |__| (_) | |_| | | | | ||  __/ |  \__ \               |
#   |               \____\___/ \__,_|_| |_|\__\___|_|  |___/               |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Check page faults, context switches and process creations           |
#   '----------------------------------------------------------------------'

# Inventory creates three checks per default:
inventory_kernel_counters = ["pgmajfault", "ctxt", "processes"]
kernel_default_levels = None

kernel_counter_names = {
    "ctxt": "Context Switches",
    "processes": "Process Creations",
    "pgmajfault": "Major Page Faults",
}


def inventory_kernel(parsed):
    _, items = parsed
    return [(counter_name, "kernel_default_levels")
            for counter_name in items
            if len(items[counter_name]) == 1 and counter_name in kernel_counter_names.values()]


def parse_kernel(info):
    try:
        timestamp = int(info[0][0])
    except (IndexError, ValueError):
        timestamp = None

    parsed = {}
    for line in info[1:]:
        if line[0] in kernel_counter_names.keys():
            try:
                parsed.setdefault(kernel_counter_names[line[0]], []).append((line[0], int(line[1])))
            except (IndexError, ValueError):
                continue

        if line[0].startswith('cpu'):
            try:
                parsed.setdefault('Cpu Load', []).append((line[0], line[1:]))
            except (IndexError, ValueError):
                continue
    return timestamp, parsed


# item is one of the keys in /proc/stat or /proc/vmstat
def check_kernel(item, params, parsed):
    timestamp, items = parsed

    if timestamp is None:
        return

    item_values = items.get(item)

    if item_values is None:
        return

    if len(item_values) > 1:
        return 3, "item '%s' not unique (found %d times)" % (item, len(item_values))

    counter, value = item_values[0]
    per_sec = get_rate(None, timestamp, value)
    return check_levels(per_sec, counter, params, unit="/s")


check_info["kernel"] = {
    'parse_function': parse_kernel,
    'inventory_function': inventory_kernel,
    'check_function': check_kernel,
    'service_description': 'Kernel %s',
    'has_perfdata': True,
    'group': 'vm_counter',
}
#.
#   .--kernel.util--CPU Utilization----------------------------------------.
#   |             _   _ _   _ _ _          _   _                           |
#   |            | | | | |_(_) (_)______ _| |_(_) ___  _ __                |
#   |            | | | | __| | | |_  / _` | __| |/ _ \| '_ \               |
#   |            | |_| | |_| | | |/ / (_| | |_| | (_) | | | |              |
#   |             \___/ \__|_|_|_/___\__,_|\__|_|\___/|_| |_|              |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Check system/user/io-wait                                           |
#   '----------------------------------------------------------------------'


def inventory_cpu_utilization(parsed):
    _, items = parsed
    data = items.get('Cpu Load')
    if data is not None and len(data) > 0:
        return [(None, {})]


# Columns of cpu usage /proc/stat:
# - cpuX: number of CPU or only 'cpu' for aggregation
# - user: normal processes executing in user mode
# - nice: niced processes executing in user mode
# - system: processes executing in kernel mode
# - idle: twiddling thumbs
# - iowait: waiting for I/O to complete
# - irq: servicing interrupts
# - softirq: servicing softirqs
# - steal: Stolen time, which is the time spent in other operating systems
#          when running in a virtualized environment (since Linux 2.6.11)
# - guest: Time spent running a virtual CPU for guest operating systems (since Linux 2.6.24)
# - guest_nice: Time spent running a niced guest (since Linux 2.6.33)


def kernel_check_cpu_utilization(item, params, parsed):
    params = transform_cpu_iowait(params)
    _, items = parsed
    total, cores = [], []

    # Look for entry matching "cpu" (this is the combined load of all cores)
    for cpu in items.get('Cpu Load', []):
        if cpu[0] == 'cpu':
            total.append(cpu_info([cpu[0]] + cpu[1]))
        elif cpu[0].startswith('cpu'):
            cores.append(cpu_info([cpu[0]] + cpu[1]))

    if len(total) != 1:
        return 3, "More than one line with CPU info found. This check is not cluster-enabled."

    # total contains now the following columns:
    # 'cpu' user nice system idle wait hw-int sw-int (steal ...)
    # convert number to int
    return check_cpu_util_unix(total[0], params, cores)


check_info["kernel.util"] = {
    'check_function': kernel_check_cpu_utilization,
    'inventory_function': inventory_cpu_utilization,
    'service_description': 'CPU utilization',
    'has_perfdata': True,
    'group': 'cpu_iowait',
    'includes': ['cpu_util.include', 'transforms.include'],
}
