#!/bin/bash
# Little wrapper for futurize.

REPO_PATH=$(dirname $(dirname $(realpath "$0")))
cd "$REPO_PATH"

# If futurize does not find any modifications then it returns:
# RefactoringTool: No files need to be modified.

# Otherwise futurize prints output on stdout:
# RefactoringTool: Refactored checks/3par_capacity
# --- checks/3par_capacity	(original)
# +++ checks/3par_capacity	(refactored)
# @@ -26,14 +26,14 @@
#
#
#  def inventory_3par_capacity(parsed):
# -    for key, value in parsed.iteritems():
# +    for key, value in parsed.items():
#          if value['totalMiB'] == 0:
#              continue
#          yield (key.replace("Capacity", ""), {})
#
#
#  def check_3par_capacity(item, params, parsed):
# -    for key, value in parsed.iteritems():
# +    for key, value in parsed.items():
#          if key.replace("Capacity", "") == item:
#              total = value['totalMiB']
#              free = value['freeMiB']

ENABLED_FIXERS=

#ENABLED_FIXERS+=" lib2to3.fixes.fix_dict"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_funcattrs"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_idioms"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_itertools"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_itertools_imports"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_long"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_map"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_methodattrs"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_next"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_operator"
#ENABLED_FIXERS+=" lib2to3.fixes.fix_zip"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_absolute_import"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_basestring"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_cmp"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_division_safe"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_execfile"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_future_builtins"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_future_standard_library"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_future_standard_library_urllib"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_metaclass"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_object"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_print_with_import"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_raise"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_unicode_keep_u"
#ENABLED_FIXERS+=" libfuturize.fixes.fix_xrange_with_import"

# *** Mechanical/easy fixers ***
#---------------------------------------------------------------------------
ENABLED_FIXERS+=" libfuturize.fixes.fix_next_call"
ENABLED_FIXERS+=" lib2to3.fixes.fix_apply"
ENABLED_FIXERS+=" lib2to3.fixes.fix_except"
ENABLED_FIXERS+=" lib2to3.fixes.fix_exec"
ENABLED_FIXERS+=" lib2to3.fixes.fix_exitfunc"
ENABLED_FIXERS+=" lib2to3.fixes.fix_filter"
ENABLED_FIXERS+=" lib2to3.fixes.fix_getcwdu"
ENABLED_FIXERS+=" lib2to3.fixes.fix_has_key"
ENABLED_FIXERS+=" lib2to3.fixes.fix_input"
ENABLED_FIXERS+=" lib2to3.fixes.fix_intern"
ENABLED_FIXERS+=" lib2to3.fixes.fix_isinstance"
ENABLED_FIXERS+=" lib2to3.fixes.fix_ne"
ENABLED_FIXERS+=" lib2to3.fixes.fix_nonzero"
ENABLED_FIXERS+=" lib2to3.fixes.fix_numliterals"
ENABLED_FIXERS+=" lib2to3.fixes.fix_paren"
ENABLED_FIXERS+=" lib2to3.fixes.fix_raw_input"
ENABLED_FIXERS+=" lib2to3.fixes.fix_reduce"
ENABLED_FIXERS+=" lib2to3.fixes.fix_renames"
ENABLED_FIXERS+=" lib2to3.fixes.fix_repr"
ENABLED_FIXERS+=" lib2to3.fixes.fix_standarderror"
ENABLED_FIXERS+=" lib2to3.fixes.fix_sys_exc"
ENABLED_FIXERS+=" lib2to3.fixes.fix_throw"
ENABLED_FIXERS+=" lib2to3.fixes.fix_tuple_params"
ENABLED_FIXERS+=" lib2to3.fixes.fix_types"
ENABLED_FIXERS+=" lib2to3.fixes.fix_xreadlines"
ENABLED_FIXERS+=" libpasteurize.fixes.fix_newstyle"

# *** More complex fixers ***
#---------------------------------------------------------------------------

# *** Useless fixers ***
#---------------------------------------------------------------------------
# lib2to3.fixes.fix_ws_comma
# This performs cosmetic changes. This is not applied by default because it
# does not serve to improve Python 2/3 compatibility. (In some cases it may
# also reduce readability: see issue #58.)

if [ -z "$ENABLED_FIXERS" ]; then
    echo "No fixer enabled"
    exit 0
fi

# Check all relevant files in case no PYTHON_FILES is set via environment
PYTHON_FILES=${PYTHON_FILES-$($REPO_PATH/tests/find-python-files)}
PYTHON_FILES=$(echo "$PYTHON_FILES" | grep -v "$REPO_PATH/agents/plugins")

FIXER_OPTS=""
for FIXER in $ENABLED_FIXERS; do
    FIXER_OPTS+=" -f $FIXER"
done

# shellcheck disable=SC2086
RESULT=$(futurize $FIXER_OPTS $PYTHON_FILES 2>&1)
# This may be a bug: futurize produces some bogus messages like:
#     RefactoringTool: No changes to check_bi_aggr
#     RefactoringTool: Files that need to be modified:
#     RefactoringTool: check_bi_aggr
echo "$RESULT" | grep  -v '^RefactoringTool: '
echo "$RESULT" | grep '^+++ .*(refactored)$' | \
    sed -e 's/^+++ //' -e 's/[[:blank:]]*(refactored)$/:1:1: error: file needs to be refactored/'
